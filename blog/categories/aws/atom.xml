<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | Development - Just the Good Bits]]></title>
  <link href="http://davidsulpy.github.io/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://davidsulpy.github.io/"/>
  <updated>2013-08-26T12:23:19-05:00</updated>
  <id>http://davidsulpy.github.io/</id>
  <author>
    <name><![CDATA[David Sulpy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build a Resilient AWS EC2 Linux Instance Utilizing Nginx and Node.js (Part 2)]]></title>
    <link href="http://davidsulpy.github.io/blog/2013/07/19/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js-part-2/"/>
    <updated>2013-07-19T09:25:00-05:00</updated>
    <id>http://davidsulpy.github.io/blog/2013/07/19/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js-part-2</id>
    <content type="html"><![CDATA[<p>If you followed read my last post, you were walked through how to build a node-nginx EC2 instance on RHEL 6. I had initially started with Amazon Linux before writing that post, and then switch to Ubuntu 12.04 and finally to RHEL6.4 only after not having much, off-the-bat success with the first two. This post, I am going to tackle the same thing, but with Amazon Linux and work out the kinks. Why? Because Amazon Linux is cheaper per hour, optomized for running in Amazon&rsquo;s cloud, has much better Amazon support, AND if you want to do any kind of automated deployments/installations when launching this instance from an AMI, you can use aws-cfn-bootstrap which isn&rsquo;t terribly well supported on RHEL6.4 (for instance, if you install on RHEL6.4 your likely to run into some interesting issues trying to reconnect to your instance on port 22 later&hellip;).</p>

<h2>1. Start an Amazon Linux EC2 Instance</h2>

<p>I won&rsquo;t go into detail about how to do this, as it&rsquo;s very similar (in fact, nearly identical except for choosing Amazon Linux as opposed to RHEL 6.4) to step 1 in <a href="/blog/2013/07/13/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js/">my previous post</a>.</p>

<h2>2. Update yum</h2>

<p>When I connected to my instance, I noticed a few updates available so I updated them via yum:
<code>
$ yum update
</code></p>

<h2>3. Install nginx 1.4.1</h2>

<p>As I mentioned in my previous post, Amazon Linux only has an older version of nginx available via <code>yum</code> by default. Because of this, we&rsquo;re going to have to get the nginx rpm package and build it ourselves.</p>

<p>First, we&rsquo;ll need <code>rpm-build</code> and <code>rpm-devel</code> as Amazon Linux doesn&rsquo;t ship with these out of the gate.
```</p>

<h1>yum -y install rpm-build rpm-devel</h1>

<p>```</p>

<p>Next, we&rsquo;re going to get the nginx rpm. I&rsquo;m going to do this in the <code>/usr/local/src/</code> directory. Also, you&rsquo;ll note that the url to the rpm that I&rsquo;m using is specific to nginx 1.4.1. If you want a different version you can see the package list at <a href="http://nginx.org/packages/centos/6/SRPMS/">http://nginx.org/packages/centos/6/SRPMS/</a></p>

<p>```</p>

<h1>cd /usr/local/src/</h1>

<h1>wget <a href="http://nginx.org/packages/centos/6/SRPMS/nginx-1.4.1-1.el6.ngx.src.rpm">http://nginx.org/packages/centos/6/SRPMS/nginx-1.4.1-1.el6.ngx.src.rpm</a></h1>

<p>```</p>

<p>Now, we need to install the dependencies for building nginx</p>

<p>```</p>

<h1>yum install zlib-devel pcre-devel openssl-devel</h1>

<h1>yum install gcc</h1>

<p>```</p>

<p>Use the rpm tool</p>

<p>```</p>

<h1>rpm -i nginx-1.4.1-1.el6.ngx.src.rpm</h1>

<p>```</p>

<p>Then, we&rsquo;ll actually build nginx</p>

<p>```</p>

<h1>cd /usr/src/rpm/SPECS</h1>

<h1>rpmbuild -bb nginx.spec</h1>

<p>```</p>

<p>Finally, we&rsquo;ll install via yum the locally built package.</p>

<p>```</p>

<h1>yum install /usr/src/rpm/RPMS/x86_64/nginx-1.4.1-1.amzn1.ngx.x86_64.rpm</h1>

<p>```</p>

<p>You should now have an <code>/etc/nginx/</code> directory and you should be able to run <code>$ sudo nginx</code> and see the following page at your instance url (assuming you opened port 80 in your instance&rsquo;s security group)</p>

<p><img src="http://davidsulpy.github.io/images/gtZCABS5Mp6KCBjWIjiA0nZtnyaoOTtDQiYqY7hK9BQ.png" alt="Welcome to nginx" /></p>

<h2>4. Configuring nginx</h2>

<p>See step 5 of <a href="/blog/2013/07/13/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js/">my previous post</a>, it&rsquo;s the same here.</p>

<h2>5. Installing node</h2>

<p>We&rsquo;re going to install <code>git</code> and download node source and compile it locally. We&rsquo;re going to checkout the branch for v0.10.13 because at the time of this artical, that&rsquo;s the current version as noted on nodejs.org. We&rsquo;ll also need g++ so we&rsquo;ll install taht as well</p>

<p>```</p>

<h1>yum install gcc-c++</h1>

<h1>yum install git</h1>

<h1>git clone <a href="https://github.com/joyent/node.git">https://github.com/joyent/node.git</a></h1>

<h1>cd node/</h1>

<h1>git checkout v0.10.13</h1>

<h1>./configure &mdash;prefix=/opt/node &amp;&amp; make &amp;&amp; make install</h1>

<p>```</p>

<p>Now, grab some coffee because this is going to take a whileâ€¦</p>

<p>Once it&rsquo;s finished you can add node to your $PATH with the following command</p>

<p>```</p>

<h1>export PATH=$PATH:/usr/local/bin</h1>

<p>```</p>

<h2>6. Getting node up and running with nginx</h2>

<p>See step 7 of <a href="/blog/2013/07/13/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js/">my previous post</a> this step is the same.</p>

<h2>7. Setting up supervisord</h2>

<p>This is the same as step 8 in <a href="/blog/2013/07/13/how-to-build-a-resilient-aws-ec2-linux-instance-utilizing-nginx-and-node-dot-js/">my previous post</a>.</p>

<h2>8. Baking an AMI</h2>

<p>This was something that I meant to cover in my previous post, but didn&rsquo;t so I&rsquo;ll cover it here. Although, this is by far the easiest step. In order to create an AMI (Amazon Machine Instance) on AWS you simply right click the instance that you&rsquo;ve been working on in the EC2 &ndash;> Instances list, then click &lsquo;Create Image (EBS AMI)`</p>

<p><img src="/images/D5QErtoN-G9x9W7RiKVhAxgbUm2aNMgMojiS-hFD81A.png" alt="Create Image" /></p>

<p>Once you&rsquo;ve done this the most important (and required) thing you&rsquo;ll be asked for is a name. After giving a name, click &lsquo;Yes, Create.&rsquo;</p>

<blockquote><p><strong>NOTE:</strong> make sure you name it something rememberable like node-nginx_YYYY.MM.DD. This will help you when you start making multiple images a day.</p></blockquote>

<p>You&rsquo;re AMI will be ready shortly. With an AMI you have the ability to launch exactly where you left off on any different instance size, security group, key-pair, etc you&rsquo;d like.</p>

<p><em>Brilliant.</em></p>
]]></content>
  </entry>
  
</feed>
